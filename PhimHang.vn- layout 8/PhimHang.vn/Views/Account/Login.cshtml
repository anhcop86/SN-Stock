@model PhimHang.Models.LoginViewModel
 @{
     ViewBag.Title = "Đăng nhập";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    <script type="text/javascript">

        window.fbAsyncInit = function () {
            FB.init({
                appId: '934180333272963',
                status: true, // check login status
                cookie: true, // enable cookies to allow the server to access the session
                xfbml: true  // parse XFBML
            });

            // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
            // for any authentication related change, such as login, logout or session refresh. This means that
            // whenever someone who was previously logged out tries to log in again, the correct case below
            // will be handled.
            FB.Event.subscribe('auth.authResponseChange', function (response) {
                // Here we specify what we do with the response anytime this event occurs.
                if (response.status === 'connected') {
                    // The response object is returned with a status field that lets the app know the current
                    // login status of the person. In this case, we're handling the situation where they
                    // have logged in to the app.
                    var uid = response.authResponse.userID;
                    var accessToken = response.authResponse.accessToken;

                    //                      testAPI(accessToken);
                } else if (response.status === 'not_authorized') {
                    // In this case, the person is logged into Facebook, but not into the app, so we call
                    // FB.login() to prompt them to do so.
                    // In real-life usage, you wouldn't want to immediately prompt someone to login
                    // like this, for two reasons:
                    // (1) JavaScript created popup windows are blocked by most browsers unless they
                    // result from direct interaction from people using the app (such as a mouse click)
                    // (2) it is a bad experience to be continually prompted to login upon page load.
                    FB.login();
                } else {
                    // In this case, the person is not logged into Facebook, so we call the login()
                    // function to prompt them to do so. Note that at this stage there is no indication
                    // of whether they are logged into the app. If they aren't then they'll see the Login
                    // dialog right after they log in to Facebook.
                    // The same caveats as above apply to the FB.login() call here.
                    FB.login();
                }
            });
        };

        // Load the SDK asynchronously
        (function (d) {
            var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement('script'); js.id = id; js.async = true;
            js.src = "//connect.facebook.net/en_US/all.js";
            ref.parentNode.insertBefore(js, ref);
        }(document));

        // Here we run a very simple test of the Graph API after login is successful.
        // This testAPI() function is only called in those cases.
        function testAPI(accessToken) {
            console.log('Welcome!  Fetching your information.... ');
            FB.api('/me', function (response) {
                console.log('Good to see you, ' + response.name + '.');

            });
        }
        function logoutFacebook() {
            FB.logout(function (response) {
                //            alert('Đã logout khỏi facebook');
            });
        }
    </script>

<div id="fb-root"></div>

    <div id="outer-frame">
        <div id="page-content">
            <div id="login-or-register-page-content">
                @*<img src="/images/Untitled.png" class="login-or-register-img">*@
                <div class="top-sidebar">
                    <div class="login-register-container  standard">
                        <div class="login-register-login-part">
                            <div class="clearfix">
                                <div class="login-register-header">Đăng nhập</div>
                                <div class="login-register-switch">                                    
                                    <a href="/Account/Register/?ReturnUrl=@ViewBag.ReturnUrl" class="login-register-switch-link">Tạo tài khoản</a>
                                </div>
                            </div>
                            <div class="login-form-container  standard">
                                @*<form action="/" method="post" class="clearfix login-form">*@
                                @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "clearfix login-form" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <div class="text-input login-text-input standard">
                                        <div class="text-input-error-wrapper">@Html.ValidationSummary(true) @Html.ValidationMessageFor(m => m.UserName)</div>

                                        <div class="text-input-wrapper">
                                            @Html.TextBoxFor(m => m.UserName, new { @class = "text-input-input autofocus", placeholder = "Username" })
                                            @* <input type="email" name="login_email" class="text-input-input autofocus" placeholder="User name" />*@
                                        </div>
                                    </div>
                                    <div class="text-input login-password login-text-input standard">
                                        <div class="text-input-error-wrapper">@Html.ValidationMessageFor(m => m.Password)</div>
                                        <div class="text-input-wrapper">
                                            @Html.PasswordFor(m => m.Password, new { @class = "password-input text-input-input", placeholder = "Password" })
                                            @*<input type="password" name="login_password" class="password-input text-input-input" placeholder="User name" />*@
                                        </div>
                                    </div>
                                    <div class="clearfix">
                                        <div class="sso-description"></div>
                                        <div class="checkbox checkbox-inline standard remember-me">
                                            <div class="text-input-error-wrapper"></div>
                                            @Html.CheckBoxFor(m => m.RememberMe)
                                            @*<input checked="checked" type="checkbox" name="remember_me" id="pyxl1186533921719020216">*@
                                            <label>Remember me</label>
                                        </div>
                                        <button type="submit" class="login-button button-primary">
                                            <div class="sign-in-text">Sign in</div>
                                        </button>

                                        
                                    </div>
                                    <div class="login-need-help"><a href="/forgot">Forgot your password?</a><a style="float:right" href="/">Trang chủ</a></div>
                                    
                                }
                                @Html.Partial("_ExternalLoginsListPartial", new { Action = "ExternalLogin", ReturnUrl = ViewBag.ReturnUrl })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
