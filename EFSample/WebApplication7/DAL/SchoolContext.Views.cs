//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(WebApplication7.DAL.SchoolContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsb326ae4aa08ad80b2ba2d01f3aa9d4eeaf2ca2f511eafc2d75a3a57d64678a68))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsb326ae4aa08ad80b2ba2d01f3aa9d4eeaf2ca2f511eafc2d75a3a57d64678a68 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "b326ae4aa08ad80b2ba2d01f3aa9d4eeaf2ca2f511eafc2d75a3a57d64678a68"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Course")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Department")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Instructor")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.OfficeAssignment")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Enrollment")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Student")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.InstructorCourse")
            {
                return GetView6();
            }

            if (extentName == "SchoolContext.Courses")
            {
                return GetView7();
            }

            if (extentName == "SchoolContext.Departments")
            {
                return GetView8();
            }

            if (extentName == "SchoolContext.Instructors")
            {
                return GetView9();
            }

            if (extentName == "SchoolContext.OfficeAssignments")
            {
                return GetView10();
            }

            if (extentName == "SchoolContext.Enrollments")
            {
                return GetView11();
            }

            if (extentName == "SchoolContext.Students")
            {
                return GetView12();
            }

            if (extentName == "SchoolContext.Instructor_Courses")
            {
                return GetView13();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Course.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Course
        [CodeFirstDatabaseSchema.Course](T1.Course_CourseID, T1.Course_Title, T1.Course_Credits, T1.Course_DepartmentID)
    FROM (
        SELECT 
            T.CourseID AS Course_CourseID, 
            T.Title AS Course_Title, 
            T.Credits AS Course_Credits, 
            T.DepartmentID AS Course_DepartmentID, 
            True AS _from0
        FROM SchoolContext.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Department.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Department
        [CodeFirstDatabaseSchema.Department](T1.Department_DepartmentID, T1.Department_Name, T1.Department_Budget, T1.Department_StartDate, T1.Department_InstructorID)
    FROM (
        SELECT 
            T.DepartmentID AS Department_DepartmentID, 
            T.Name AS Department_Name, 
            T.Budget AS Department_Budget, 
            T.StartDate AS Department_StartDate, 
            T.InstructorID AS Department_InstructorID, 
            True AS _from0
        FROM SchoolContext.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Instructor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instructor
        [CodeFirstDatabaseSchema.Instructor](T1.Instructor_ID, T1.Instructor_LastName, T1.Instructor_FirstName, T1.Instructor_HireDate)
    FROM (
        SELECT 
            T.ID AS Instructor_ID, 
            T.LastName AS Instructor_LastName, 
            T.FirstMidName AS Instructor_FirstName, 
            T.HireDate AS Instructor_HireDate, 
            True AS _from0
        FROM SchoolContext.Instructors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.OfficeAssignment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OfficeAssignment
        [CodeFirstDatabaseSchema.OfficeAssignment](T1.OfficeAssignment_InstructorID, T1.OfficeAssignment_Location)
    FROM (
        SELECT 
            T.InstructorID AS OfficeAssignment_InstructorID, 
            T.Location AS OfficeAssignment_Location, 
            True AS _from0
        FROM SchoolContext.OfficeAssignments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Enrollment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enrollment
        [CodeFirstDatabaseSchema.Enrollment](T1.Enrollment_EnrollmentID, T1.Enrollment_CourseID, T1.Enrollment_StudentID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS Enrollment_EnrollmentID, 
            T.CourseID AS Enrollment_CourseID, 
            T.StudentID AS Enrollment_StudentID, 
            CAST(T.Grade AS [Edm.Int32]) AS Enrollment_Grade, 
            True AS _from0
        FROM SchoolContext.Enrollments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [CodeFirstDatabaseSchema.Student](T1.Student_StudentID, T1.Student_LastName, T1.Student_FirstName, T1.Student_EnrollmentDate, T1.Student_Secret)
    FROM (
        SELECT 
            T.StudentID AS Student_StudentID, 
            T.LastName AS Student_LastName, 
            T.FirstMidName AS Student_FirstName, 
            T.EnrollmentDate AS Student_EnrollmentDate, 
            T.Secret AS Student_Secret, 
            True AS _from0
        FROM SchoolContext.Students AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.InstructorCourse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstructorCourse
        [CodeFirstDatabaseSchema.InstructorCourse](T1.[InstructorCourse.Instructor_ID], T1.[InstructorCourse.Course_CourseID])
    FROM (
        SELECT 
            Key(T.Instructor_Courses_Source).ID AS [InstructorCourse.Instructor_ID], 
            Key(T.Instructor_Courses_Target).CourseID AS [InstructorCourse.Course_CourseID], 
            True AS _from0
        FROM SchoolContext.Instructor_Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [WebApplication7.DAL.Course](T1.Course_CourseID, T1.Course_Title, T1.Course_Credits, T1.Course_DepartmentID)
    FROM (
        SELECT 
            T.CourseID AS Course_CourseID, 
            T.Title AS Course_Title, 
            T.Credits AS Course_Credits, 
            T.DepartmentID AS Course_DepartmentID, 
            True AS _from0
        FROM CodeFirstDatabase.Course AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [WebApplication7.DAL.Department](T1.Department_DepartmentID, T1.Department_Name, T1.Department_Budget, T1.Department_StartDate, T1.Department_InstructorID)
    FROM (
        SELECT 
            T.DepartmentID AS Department_DepartmentID, 
            T.Name AS Department_Name, 
            T.Budget AS Department_Budget, 
            T.StartDate AS Department_StartDate, 
            T.InstructorID AS Department_InstructorID, 
            True AS _from0
        FROM CodeFirstDatabase.Department AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.Instructors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instructors
        [WebApplication7.DAL.Instructor](T1.Instructor_ID, T1.Instructor_LastName, T1.Instructor_FirstMidName, T1.Instructor_HireDate)
    FROM (
        SELECT 
            T.ID AS Instructor_ID, 
            T.LastName AS Instructor_LastName, 
            T.FirstName AS Instructor_FirstMidName, 
            T.HireDate AS Instructor_HireDate, 
            True AS _from0
        FROM CodeFirstDatabase.Instructor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.OfficeAssignments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OfficeAssignments
        [WebApplication7.DAL.OfficeAssignment](T1.OfficeAssignment_InstructorID, T1.OfficeAssignment_Location)
    FROM (
        SELECT 
            T.InstructorID AS OfficeAssignment_InstructorID, 
            T.Location AS OfficeAssignment_Location, 
            True AS _from0
        FROM CodeFirstDatabase.OfficeAssignment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.Enrollments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enrollments
        [WebApplication7.DAL.Enrollment](T1.Enrollment_EnrollmentID, T1.Enrollment_CourseID, T1.Enrollment_StudentID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS Enrollment_EnrollmentID, 
            T.CourseID AS Enrollment_CourseID, 
            T.StudentID AS Enrollment_StudentID, 
            CAST(T.Grade AS [WebApplication7.DAL.Grade]) AS Enrollment_Grade, 
            True AS _from0
        FROM CodeFirstDatabase.Enrollment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.Students.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Students
        [WebApplication7.DAL.Student](T1.Student_StudentID, T1.Student_LastName, T1.Student_FirstMidName, T1.Student_EnrollmentDate, T1.Student_Secret)
    FROM (
        SELECT 
            T.StudentID AS Student_StudentID, 
            T.LastName AS Student_LastName, 
            T.FirstName AS Student_FirstMidName, 
            T.EnrollmentDate AS Student_EnrollmentDate, 
            T.Secret AS Student_Secret, 
            True AS _from0
        FROM CodeFirstDatabase.Student AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolContext.Instructor_Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instructor_Courses
        [WebApplication7.DAL.Instructor_Courses](T3.[Instructor_Courses.Instructor_Courses_Source], T3.[Instructor_Courses.Instructor_Courses_Target])
    FROM (
        SELECT -- Constructing Instructor_Courses_Source
            CreateRef(SchoolContext.Instructors, row(T2.[Instructor_Courses.Instructor_Courses_Source.ID]), [WebApplication7.DAL.Instructor]) AS [Instructor_Courses.Instructor_Courses_Source], 
            T2.[Instructor_Courses.Instructor_Courses_Target]
        FROM (
            SELECT -- Constructing Instructor_Courses_Target
                T1.[Instructor_Courses.Instructor_Courses_Source.ID], 
                CreateRef(SchoolContext.Courses, row(T1.[Instructor_Courses.Instructor_Courses_Target.CourseID]), [WebApplication7.DAL.Course]) AS [Instructor_Courses.Instructor_Courses_Target]
            FROM (
                SELECT 
                    T.Instructor_ID AS [Instructor_Courses.Instructor_Courses_Source.ID], 
                    T.Course_CourseID AS [Instructor_Courses.Instructor_Courses_Target.CourseID], 
                    True AS _from0
                FROM CodeFirstDatabase.InstructorCourse AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
