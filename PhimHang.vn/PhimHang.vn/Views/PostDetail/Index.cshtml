@model PhimHang.Models.Post
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout_MyProfile_Setting.cshtml";
}

@section scripts{
    <link href="~/Content/StockPrice.css" rel="stylesheet" />
    <script src="~/Scripts/jquery.timeago.js"></script>
    @*<script src="~/Scripts/StockPrice.js"></script>*@
}


<div class="bg-white">
    <div class="list-status">
        <!--list comment here location.href='/Symbol/Details/' +-->
        <div class="list-item-status">
            <div class="avata-genaral-size">
                <img class="img-rounded" alt="avatar" src="/@ViewBag.AvataEmagebyPost?width=48&height=48&mode=crop">
            </div>
            <div class="list-item-detail">
                <div class="list-item-date">@Model.PostedDate</div>
                <div class="list-item-username">@Model.UserLogin.UserNameCopy</div>
                <div style="cursor:pointer" class="list-item-status-content">@Html.Raw(@Model.Message)</div>
            </div>
        </div>

        <!--end list comment-->

    </div>
</div>
<div class="bg-white" id="CommentForKoLoad">
    <div class="list-status">
        <!--list comment here location.href='/Symbol/Details/' +-->
        <div class="list-item-status" data-bind="foreach : replys">
            <div class="avata-genaral-size">
                <img class="img-rounded" alt="avatar" data-bind="attr: { src: ReplyByAvatar }">
            </div>
            <div class="list-item-detail">
                <div class="list-item-date" data-bind="text : ReplyDate"></div>
                <div class="list-item-username" data-bind="text : ReplyByName"></div>
                <div style="cursor:pointer" class="list-item-status-content" data-bind="html : ReplyMessage "></div>
                <div class="list-item-control">
                    @*<a class="button"><i class="fa fa-comments"></i>1</a>
                    <a style="cursor:pointer" class="button" data-bind="click : function() {  location.href='/PostDetail?postid='+ PostId +'&stock=' + StockPrimary }">Trả lời</a>
                    <a class="button">Chia sẻ</a>
                    <a class="button">Thích</a>*@
                    <a class="button">Báo cáo vi phạm</a>
                </div>
            </div>
        </div>

        <!--end list comment-->

    </div>
    
        <div class="status-box">
            <div class="avatar-small">
                <img src="/@ViewBag.AvataEmage?width=28&height=28&mode=crop" class="img-rounded" alt="avatar">
            </div>
            <div class="input-status">

                <div id="input-status-text" class="input-status-text">
                    <textarea data-bind="value : newMessage, valueUpdate : 'afterkeydown' , limitCharacters : 140" name="status" rows="5" placeholder="Nhập để trả lời" id="status" title="Search"></textarea>
                </div>
                <div class="status-control">
                    <div id="btnPhim" class="f-right">
                        <span data-bind="text : count"></span>
                        @*<a href="javascript:void(0)" class="button-phim" data-bind="click : addPost"><span>PHÍM</span></a>*@
                        <input type="button" style="cursor:pointer" class="button-phim" value="Trả lời" data-bind="click : addReply,  enable: enablePhimHang " />
                    </div>
                </div>
            </div>
        </div>
    

</div>
<script type="text/javascript">
    function getTimeAgo(varDate) {
        if (varDate) {
            return $.timeago(varDate);
        }
        else {
            return '';
        }
    }
    function Post(data, hub) {
        var self = this;
        data = data || {};
        self.PostId = data.PostId;
        self.ReplyMessage = ko.observable(data.ReplyMessage || "");
        self.ReplyByName = data.ReplyByName || "";
        self.ReplyByAvatar = data.ReplyByAvatar || "";
        self.ReplyDate = getTimeAgo(data.ReplyDate);

        //self.error = ko.observable();
        self.hub = hub;

    }
    function viewModel() {
        var self = this;
        self.replys = ko.observableArray();
        self.newMessage = ko.observable('');
        self.error = ko.observable();

        // SignalR related
        //self.newPosts = ko.observableArray();
        // Reference the proxy for the hub.
        self.hub = $.connection.CommentHub;

        self.init = function () {
            self.error(null);
            //self.hub.server.joinRoom('@ViewBag.StockCode');
            $.get('@Url.Action("GetReplyByPostId", "PostDetail")',
            {
                replyid: '@Model.PostId'
            }, function (data) {
                var mappedPosts = $.map(ko.utils.parseJson(data), function (item) { return new Post(item, self.hub); });
                $(mappedPosts).each(function (index, element) {
                    self.replys.push(element);
                });
            })
        }


        self.addReply = function () { // khi click nut tra loi
            self.error(null);
            //var nhanDinh = $('input[name=BullBear]:checked').val();
            
            self.hub.server.addReply({ "Message": self.newMessage() }, '@Model.StockPrimary', '@ViewBag.CureentUserId', '@ViewBag.UserName', '@ViewBag.AvataImageUrl', '@Model.PostId').fail(function (err) {
                self.error(err);
            });            
        }

        self.hub.client.addReply = function (post) {
            self.replys.push(new Post(post, self.hub));
            self.newMessage('');
        }

        self.count = ko.computed(function () {
            var countNum = 140 - self.newMessage().length;
            return countNum;
        });


        self.enablePhimHang = ko.computed(function () {
            return self.newMessage().length <= 140 && self.newMessage().length >= 6;
        });


    }

    ko.bindingHandlers.limitCharacters = {
        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            element.value = element.value.substr(0, valueAccessor());
            allBindingsAccessor().value(element.value.substr(0, valueAccessor()));
        }
    };

    var vmPost = new viewModel();
    ko.applyBindings(vmPost, document.getElementById("CommentForKoLoad"));
    $.connection.hub.start().done(function () {
        vmPost.init();
    });

    $.connection.hub.logging = true;
</script>